class a{constructor(e,t,r){if(this.password=e,this.encoder=new TextEncoder,this.decoder=new TextDecoder,this.salt=this.encoder.encode(t),this.iv=this.encoder.encode(r),this.iv.length!==12)throw new Error("IV는 12바이트 문자열이어야 합니다.")}async getKey(){const e=await crypto.subtle.importKey("raw",this.encoder.encode(this.password),{name:"PBKDF2"},!1,["deriveKey"]);return crypto.subtle.deriveKey({name:"PBKDF2",salt:this.salt,iterations:1e5,hash:"SHA-256"},e,{name:"AES-GCM",length:256},!1,["encrypt","decrypt"])}async encrypt(e){const t=await this.getKey(),r=await crypto.subtle.encrypt({name:"AES-GCM",iv:this.iv},t,this.encoder.encode(e));return btoa(String.fromCharCode(...new Uint8Array(r)))}async decrypt(e){const t=await this.getKey(),r=Uint8Array.from(atob(e),n=>n.charCodeAt(0)),s=await crypto.subtle.decrypt({name:"AES-GCM",iv:this.iv},t,r);return this.decoder.decode(s)}}export{a as C};
